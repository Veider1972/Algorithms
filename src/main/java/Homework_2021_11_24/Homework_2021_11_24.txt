Домашнее задание за 24.11.2021

1. Определить сложность следующих алгоритмов:
     - Поиск элемента массива с известным индексом                  - O(1)
     - Дублирование одномерного массива через foreach               - O(n)
     - Удаление элемента массива с известным индексом без сдвига    - O(1)
     - Удаление элемента массива с неизвестным индексом без сдвига  - O(n)
     - Удаление элемента массива с неизвестным индексом со сдвига   - O(n)

2. Определить сложность следующих алгоритмов. Сколько произойдет итераций?

     a)
        int n = 10000;                                              - O(n*log(n))
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j *= 2) {
                arrayList.add(i * j);
            }
        }

     b)
        int n = 10000;                                              - O(n)
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i += 2) {
            for (int j = i; j < n; j++) {
                arrayList.add(i * j);
            }
        }

     с)
        int n = 10000;                                              - O(n)
        List<Integer> arrayList = new ArrayList<>();
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < n; j++) {
                arrayList.add(i * j);
                n--;
            }
        }

     d)
        factorial(BigInteger.valueOf(10000))                        - O(n)

        public static BigInteger factorial(BigInteger n) {
            if (n.equals(BigInteger.ONE)) {
                 return n;
            }
            return n.multiply(factorial(n.subtract(BigInteger.valueOf(1))));
        }

     e)
        fib(BigInteger.valueOf(50));                                - O(n)

        public static BigInteger fib(BigInteger n) {
            if (n.equals(BigInteger.ONE)) {
                return BigInteger.ZERO;
            }
            if (n.equals(BigInteger.TWO)) {
                return BigInteger.ONE;
            }
            return fib(n.subtract(BigInteger.ONE)).add(fib(n.subtract(BigInteger.TWO)));
        }